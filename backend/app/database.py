"""Database models and setup using SQLAlchemy."""
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Date, Text, Boolean, JSON, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
from typing import Generator
from .config import get_settings

settings = get_settings()

# Database engine
engine = create_engine(
    settings.database_url,
    connect_args={"check_same_thread": False} if "sqlite" in settings.database_url else {}
)

# Session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base class for models
Base = declarative_base()


# Models
class TradeCard(Base):
    """Trade card generated by AI signal engine and LLM judge."""
    __tablename__ = "trade_cards"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    
    # Trade parameters
    entry_price = Column(Float, nullable=False)
    quantity = Column(Integer, nullable=False)
    stop_loss = Column(Float, nullable=False)
    take_profit = Column(Float, nullable=False)
    trade_type = Column(String(10), nullable=False)  # BUY or SELL
    
    # Analysis
    strategy = Column(String(50))  # momentum, mean_reversion, etc.
    horizon_days = Column(Integer, default=3)
    confidence = Column(Float)  # 0.0 to 1.0
    evidence = Column(Text)  # LLM-generated reasoning
    risks = Column(Text)  # Identified risks
    
    # Status tracking
    status = Column(String(20), default="pending_approval", index=True)
    # Status: pending_approval, approved, rejected, executed, filled, cancelled, expired
    
    # Risk checks
    liquidity_check = Column(Boolean, default=False)
    position_size_check = Column(Boolean, default=False)
    exposure_check = Column(Boolean, default=False)
    event_window_check = Column(Boolean, default=False)
    risk_warnings = Column(JSON)  # List of warnings
    
    # Metadata
    model_version = Column(String(50))  # LLM model used
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    approved_at = Column(DateTime, nullable=True)
    rejected_at = Column(DateTime, nullable=True)
    rejection_reason = Column(Text, nullable=True)
    
    # Relationships
    orders = relationship("Order", back_populates="trade_card")
    audit_logs = relationship("AuditLog", back_populates="trade_card")


# ----------------------------------------------------------------------------
# Phase 2: Guardrails Support Models
# ----------------------------------------------------------------------------
class EarningsCalendar(Base):
    """Upcoming earnings and corporate actions for event window checks."""
    __tablename__ = "earnings_calendar"

    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    event_date = Column(Date, nullable=False, index=True)
    event_type = Column(String(50), nullable=False)  # EARNINGS, DIVIDEND, AGM, etc.
    source = Column(String(100))
    created_at = Column(DateTime, default=datetime.utcnow)


class SymbolMaster(Base):
    """Symbol → sector/industry mapping for exposure checks."""
    __tablename__ = "symbol_master"

    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), unique=True, nullable=False, index=True)
    company_name = Column(String(200))
    sector = Column(String(100), index=True)
    industry = Column(String(100))
    exchange = Column(String(10), default="NSE")
    isin = Column(String(20))
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class Order(Base):
    """Broker orders placed for trade cards."""
    __tablename__ = "orders"
    
    id = Column(Integer, primary_key=True, index=True)
    trade_card_id = Column(Integer, ForeignKey("trade_cards.id"), nullable=False, index=True)
    
    # Order details
    broker_order_id = Column(String(100), unique=True, index=True)
    symbol = Column(String(20), nullable=False)
    exchange = Column(String(10), default="NSE")
    order_type = Column(String(20))  # MARKET, LIMIT, SL, SL-M
    transaction_type = Column(String(10))  # BUY, SELL
    quantity = Column(Integer, nullable=False)
    price = Column(Float, nullable=True)
    trigger_price = Column(Float, nullable=True)
    
    # Status
    status = Column(String(20), index=True)
    # Status: pending, placed, rejected, cancelled, complete
    status_message = Column(Text)
    
    # Fill details
    filled_quantity = Column(Integer, default=0)
    average_price = Column(Float, nullable=True)
    
    # Metadata
    placed_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    filled_at = Column(DateTime, nullable=True)
    
    # Relationships
    trade_card = relationship("TradeCard", back_populates="orders")


class AuditLog(Base):
    """Immutable audit trail of all actions."""
    __tablename__ = "audit_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # Action details
    action_type = Column(String(50), nullable=False, index=True)
    # Actions: trade_card_created, trade_card_approved, trade_card_rejected, 
    #          order_placed, order_filled, signal_generated, etc.
    
    # Context
    user_id = Column(String(50), default="system")
    trade_card_id = Column(Integer, ForeignKey("trade_cards.id"), nullable=True, index=True)
    order_id = Column(Integer, ForeignKey("orders.id"), nullable=True)
    
    # Payload
    payload = Column(JSON)  # Full snapshot of data at action time
    meta_data = Column(JSON)  # Additional context (IP, user agent, etc.)
    
    # Model/version tracking
    model_version = Column(String(50))
    strategy_version = Column(String(50))
    
    # Timestamp
    timestamp = Column(DateTime, default=datetime.utcnow, index=True)
    
    # Relationships
    trade_card = relationship("TradeCard", back_populates="audit_logs")


class MarketDataCache(Base):
    """Cached market data for strategies."""
    __tablename__ = "market_data_cache"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    interval = Column(String(10), default="1D")  # 1D, 1H, 15M, etc.
    
    # OHLCV
    timestamp = Column(DateTime, nullable=False, index=True)
    open = Column(Float)
    high = Column(Float)
    low = Column(Float)
    close = Column(Float)
    volume = Column(Integer)
    
    # Additional data
    meta_data = Column(JSON)  # OI, IV, PCR, etc.
    
    # Cache info
    fetched_at = Column(DateTime, default=datetime.utcnow)


class Setting(Base):
    """Application settings stored in database."""
    __tablename__ = "settings"
    
    id = Column(Integer, primary_key=True, index=True)
    key = Column(String(100), unique=True, nullable=False, index=True)
    value = Column(JSON)
    description = Column(Text)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class Position(Base):
    """Current positions (mirrored from broker)."""
    __tablename__ = "positions"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    
    # Position details
    quantity = Column(Integer, nullable=False)
    average_price = Column(Float, nullable=False)
    current_price = Column(Float)
    
    # P&L
    unrealized_pnl = Column(Float)
    realized_pnl = Column(Float, default=0.0)
    
    # Metadata
    opened_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    closed_at = Column(DateTime, nullable=True)


# ============================================================================
# MULTI-ACCOUNT AI TRADER MODELS (Phase 1+)
# ============================================================================

class Account(Base):
    """Trading account - logical bucket for capital allocation."""
    __tablename__ = "accounts"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String(50), nullable=False, index=True)
    name = Column(String(100), nullable=False)  # e.g., "SIP—Aggressive (24m)"
    account_type = Column(String(50))  # SIP, LUMP_SUM, EVENT_TACTICAL
    status = Column(String(20), default="ACTIVE", index=True)  # ACTIVE, PAUSED, CLOSED
    
    # Metadata
    description = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    mandates = relationship("Mandate", back_populates="account")
    funding_plan = relationship("FundingPlan", back_populates="account", uselist=False)
    trade_cards_v2 = relationship("TradeCardV2", back_populates="account")
    positions_v2 = relationship("PositionV2", back_populates="account")
    capital_transactions = relationship("CapitalTransaction", 
                                       foreign_keys="CapitalTransaction.account_id",
                                       back_populates="account")


class Mandate(Base):
    """Trading mandate - rules and objectives for an account."""
    __tablename__ = "mandates"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    version = Column(Integer, default=1)
    
    # Objective
    objective = Column(String(50))  # MAX_PROFIT, RISK_MINIMIZED, BALANCED
    
    # Risk Parameters
    risk_per_trade_percent = Column(Float)  # e.g., 1.5
    max_positions = Column(Integer)  # e.g., 10
    max_sector_exposure_percent = Column(Float)  # e.g., 30
    
    # Trading Parameters
    horizon_min_days = Column(Integer)  # e.g., 1
    horizon_max_days = Column(Integer)  # e.g., 7
    
    # Restrictions
    banned_sectors = Column(JSON)  # ["banking", "pharma"]
    earnings_blackout_days = Column(Integer, default=2)
    liquidity_floor_adv = Column(Float)  # Minimum avg daily volume
    min_market_cap = Column(Float)  # Minimum market cap in cr
    
    # Preferences
    allowed_strategies = Column(JSON)  # ["momentum", "mean_reversion", "event_driven"]
    sl_multiplier = Column(Float, default=2.0)  # ATR multiplier for stop loss
    tp_multiplier = Column(Float, default=4.0)  # ATR multiplier for take profit
    trailing_stop_enabled = Column(Boolean, default=False)
    
    # Metadata
    assumption_log = Column(JSON)  # What Intake Agent captured
    summary = Column(Text)  # One-paragraph mandate summary
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    is_active = Column(Boolean, default=True, index=True)
    
    # Relationships
    account = relationship("Account", back_populates="mandates")


class FundingPlan(Base):
    """Funding plan - how capital flows into an account."""
    __tablename__ = "funding_plans"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    
    # Funding Type
    funding_type = Column(String(50))  # SIP, LUMP_SUM, HYBRID
    
    # SIP Parameters
    sip_amount = Column(Float)  # Monthly SIP amount
    sip_frequency = Column(String(20))  # MONTHLY, WEEKLY
    sip_start_date = Column(DateTime)
    sip_duration_months = Column(Integer)
    
    # Lump Sum Parameters
    lump_sum_amount = Column(Float)
    lump_sum_date = Column(DateTime)
    tranche_plan = Column(JSON)  # [{"percent": 33, "trigger": "immediate"}, ...]
    
    # Capital Rules
    carry_forward_enabled = Column(Boolean, default=True)
    max_carry_forward_percent = Column(Float, default=20.0)
    emergency_buffer_percent = Column(Float, default=5.0)
    
    # Current State
    total_deployed = Column(Float, default=0.0)
    available_cash = Column(Float, default=0.0)
    reserved_cash = Column(Float, default=0.0)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    account = relationship("Account", back_populates="funding_plan")


class CapitalTransaction(Base):
    """Capital movement transactions."""
    __tablename__ = "capital_transactions"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    
    # Transaction details
    transaction_type = Column(String(50))  # DEPOSIT, WITHDRAWAL, TRANSFER_IN, TRANSFER_OUT
    amount = Column(Float, nullable=False)
    
    # For inter-account transfers
    from_account_id = Column(Integer, ForeignKey("accounts.id"))
    to_account_id = Column(Integer, ForeignKey("accounts.id"))
    
    # Metadata
    reason = Column(Text)
    approved_by = Column(String(50))
    timestamp = Column(DateTime, default=datetime.utcnow, index=True)
    
    # Relationships
    account = relationship("Account", foreign_keys=[account_id], back_populates="capital_transactions")


class TradeCardV2(Base):
    """Enhanced trade card for multi-account AI trader."""
    __tablename__ = "trade_cards_v2"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    signal_id = Column(Integer, nullable=True)  # Link to signal if applicable
    
    # Basic Info
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    direction = Column(String(10))  # LONG, SHORT
    
    # Sizing
    entry_price = Column(Float, nullable=False)
    quantity = Column(Integer, nullable=False)
    position_size_rupees = Column(Float)
    
    # Brackets
    stop_loss = Column(Float, nullable=False)
    take_profit = Column(Float, nullable=False)
    trailing_stop_config = Column(JSON)
    
    # Tranche Plan
    tranche_config = Column(JSON)  # [{"percent": 33, "trigger": "immediate"}, ...]
    
    # Thesis
    strategy = Column(String(50))
    thesis = Column(Text)  # LLM-generated explanation
    evidence_links = Column(JSON)  # Links to events, features
    confidence = Column(Float)
    edge = Column(Float)  # Expected move %
    horizon_days = Column(Integer)
    
    # Risk Assessment
    risk_amount = Column(Float)
    reward_amount = Column(Float)
    risk_reward_ratio = Column(Float)
    risks = Column(Text)  # LLM-identified risks
    
    # Guardrails
    liquidity_check = Column(Boolean, default=False)
    position_size_check = Column(Boolean, default=False)
    exposure_check = Column(Boolean, default=False)
    event_window_check = Column(Boolean, default=False)
    regime_check = Column(Boolean, default=False)
    catalyst_freshness_check = Column(Boolean, default=False)
    risk_warnings = Column(JSON)
    
    # Playbook
    playbook_id = Column(Integer, nullable=True)
    playbook_overrides = Column(JSON)
    
    # Status
    status = Column(String(20), default="PENDING", index=True)
    # PENDING, APPROVED, REJECTED, EXECUTED, FILLED, CLOSED
    priority = Column(Integer, default=0)  # For hot path
    
    # LLM Metadata
    model_version = Column(String(50))
    judge_rationale = Column(Text)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    approved_at = Column(DateTime)
    rejected_at = Column(DateTime)
    executed_at = Column(DateTime)
    
    # Approval
    approved_by = Column(String(50))
    rejection_reason = Column(Text)
    
    # Relationships
    account = relationship("Account", back_populates="trade_cards_v2")
    orders_v2 = relationship("OrderV2", back_populates="trade_card")
    positions_v2 = relationship("PositionV2", back_populates="trade_card")


class OrderV2(Base):
    """Enhanced order with bracket support."""
    __tablename__ = "orders_v2"
    
    id = Column(Integer, primary_key=True, index=True)
    trade_card_id = Column(Integer, ForeignKey("trade_cards_v2.id"), nullable=False, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    
    # Order Details
    broker_order_id = Column(String(100), unique=True, index=True)
    parent_order_id = Column(Integer, ForeignKey("orders_v2.id"), nullable=True)
    order_category = Column(String(20))  # ENTRY, STOP_LOSS, TAKE_PROFIT, TRAIL
    
    symbol = Column(String(20), nullable=False)
    exchange = Column(String(10), default="NSE")
    order_type = Column(String(20))  # MARKET, LIMIT, SL, SL-M
    transaction_type = Column(String(10))  # BUY, SELL
    product = Column(String(10), default="D")  # D=Delivery, I=Intraday
    
    quantity = Column(Integer, nullable=False)
    price = Column(Float)
    trigger_price = Column(Float)
    
    # Execution
    status = Column(String(20), index=True)
    status_message = Column(Text)
    filled_quantity = Column(Integer, default=0)
    average_price = Column(Float)
    
    # Timestamps
    placed_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    filled_at = Column(DateTime)
    cancelled_at = Column(DateTime)
    
    # Relationships
    trade_card = relationship("TradeCardV2", back_populates="orders_v2")


class PositionV2(Base):
    """Enhanced position with per-account tracking."""
    __tablename__ = "positions_v2"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    trade_card_id = Column(Integer, ForeignKey("trade_cards_v2.id"), nullable=True)
    
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    direction = Column(String(10))  # LONG, SHORT
    
    # Position Details
    quantity = Column(Integer, nullable=False)
    average_entry_price = Column(Float, nullable=False)
    current_price = Column(Float)
    
    # Active Brackets
    stop_loss = Column(Float)
    take_profit = Column(Float)
    trailing_stop_config = Column(JSON)
    
    # P&L
    unrealized_pnl = Column(Float)
    realized_pnl = Column(Float, default=0.0)
    fees_paid = Column(Float, default=0.0)
    
    # Risk Metrics
    risk_amount = Column(Float)
    reward_potential = Column(Float)
    
    # Timestamps
    opened_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    closed_at = Column(DateTime)
    
    # Relationships
    account = relationship("Account", back_populates="positions_v2")
    trade_card = relationship("TradeCardV2", back_populates="positions_v2")


class Event(Base):
    """Event feeds - news, filings, announcements."""
    __tablename__ = "events"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # Source
    source = Column(String(100), index=True)  # NSE_FILING, NEWS_API, GDELT, etc.
    source_url = Column(Text)
    artifact_url = Column(Text)  # Link to original PDF/page
    
    # Content
    raw_content = Column(Text)
    normalized_content = Column(Text)
    
    # Classification
    event_type = Column(String(50), index=True)  # BUYBACK, EARNINGS, GUIDANCE, PENALTY, POLICY
    priority = Column(String(20), default="MEDIUM")  # HIGH, MEDIUM, LOW
    
    # Linking
    symbols = Column(JSON)  # Affected tickers
    sector = Column(String(50))
    
    # Timing
    event_timestamp = Column(DateTime, index=True)
    ingested_at = Column(DateTime, default=datetime.utcnow)
    processed_at = Column(DateTime)
    
    # Features
    features = Column(JSON)  # Extracted features
    
    # Status
    processing_status = Column(String(20), default="PENDING", index=True)
    # PENDING, PROCESSED, FAILED
    
    # Relationships
    tags = relationship("EventTag", back_populates="event")
    signals = relationship("Signal", back_populates="event")


class EventTag(Base):
    """NLP tags extracted from events."""
    __tablename__ = "event_tags"
    
    id = Column(Integer, primary_key=True, index=True)
    event_id = Column(Integer, ForeignKey("events.id"), nullable=False, index=True)
    
    # Entities
    entities = Column(JSON)  # Extracted entities
    tickers = Column(JSON)  # Linked tickers
    
    # Classification
    event_type = Column(String(50))
    stance = Column(String(20))  # BULLISH, BEARISH, NEUTRAL
    confidence = Column(Float)  # 0.0 to 1.0
    
    # Analysis
    rationale = Column(Text)  # 1-2 line explanation
    impact_score = Column(Float)  # Expected impact
    
    # Provenance
    model_version = Column(String(50))
    tagged_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    event = relationship("Event", back_populates="tags")


class Feature(Base):
    """Technical and derivative features for signals."""
    __tablename__ = "features"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    timestamp = Column(DateTime, nullable=False, index=True)
    
    # Momentum
    momentum_5d = Column(Float)
    momentum_10d = Column(Float)
    momentum_20d = Column(Float)
    
    # Volatility
    atr_percent = Column(Float)
    atr_14d = Column(Float)
    
    # Oscillators
    rsi_14 = Column(Float)
    
    # Gaps
    gap_percent = Column(Float)
    gap_filled = Column(Boolean)
    
    # Derivatives
    iv_rank = Column(Float)  # Implied Volatility rank
    pcr = Column(Float)  # Put-Call Ratio
    pcr_delta = Column(Float)
    oi_change_percent = Column(Float)  # Open Interest change
    futures_basis = Column(Float)
    
    # Regime
    regime_label = Column(String(20))  # LOW_VOL, MED_VOL, HIGH_VOL
    liquidity_regime = Column(String(20))  # HIGH, MEDIUM, LOW
    
    # Flows
    fpi_flow_5d = Column(Float)
    dii_flow_5d = Column(Float)
    
    # Provenance
    data_source = Column(String(50))


class OptionChain(Base):
    """Options chain snapshot per strike/expiry."""
    __tablename__ = "option_chains"

    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    expiry = Column(Date, nullable=False, index=True)
    strike = Column(Float, nullable=False, index=True)

    # Call
    ce_ltp = Column(Float)
    ce_oi = Column(Integer)
    ce_iv = Column(Float)

    # Put
    pe_ltp = Column(Float)
    pe_oi = Column(Integer)
    pe_iv = Column(Float)

    spot_price = Column(Float)
    atm_iv = Column(Float)
    pcr = Column(Float)

    ts = Column(DateTime, default=datetime.utcnow, index=True)


class OptionStrategy(Base):
    """Generated multi-leg option strategies."""
    __tablename__ = "option_strategies"

    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), index=True)
    strategy_type = Column(String(50))  # IRON_CONDOR, BULL_PUT_SPREAD, etc.
    underlying = Column(String(20), index=True)
    exchange = Column(String(10), default="NSE")
    expiry = Column(Date)

    legs = Column(JSON)  # [{type:BUY/SELL, option_type:CE/PE, strike, premium, qty}]
    net_premium = Column(Float)
    max_profit = Column(Float)
    max_loss = Column(Float)
    breakeven_upper = Column(Float)
    breakeven_lower = Column(Float)
    margin_required = Column(Float)
    pop = Column(Float)
    pnl_scenarios = Column(JSON)

    status = Column(String(20), default="PENDING", index=True)
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    executed_at = Column(DateTime)

class Signal(Base):
    """Primary trading signals."""
    __tablename__ = "signals"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(10), default="NSE")
    
    # Signal
    direction = Column(String(10))  # LONG, SHORT
    edge = Column(Float)  # Expected move %
    confidence = Column(Float)  # 0.0 to 1.0
    horizon_days = Column(Integer)
    
    # Triple Barrier
    tp_probability = Column(Float)  # Probability of hitting TP
    sl_probability = Column(Float)  # Probability of hitting SL
    
    # Quality
    quality_score = Column(Float)  # Meta-label output
    regime_compatible = Column(Boolean)
    
    # Thesis
    thesis_bullets = Column(JSON)  # Key points
    
    # Provenance
    model_version = Column(String(50))
    feature_snapshot_id = Column(Integer)
    event_id = Column(Integer, ForeignKey("events.id"))
    
    generated_at = Column(DateTime, default=datetime.utcnow, index=True)
    expires_at = Column(DateTime)
    status = Column(String(20), default="ACTIVE", index=True)
    # ACTIVE, EXPIRED, ACTED_ON
    
    # Relationships
    event = relationship("Event", back_populates="signals")
    meta_label = relationship("MetaLabel", back_populates="signal", uselist=False)


class MetaLabel(Base):
    """Meta-labels for signal quality assessment."""
    __tablename__ = "meta_labels"
    
    id = Column(Integer, primary_key=True, index=True)
    signal_id = Column(Integer, ForeignKey("signals.id"), nullable=False, index=True)
    
    # Assessment
    is_trustworthy = Column(Boolean)
    quality_score = Column(Float)
    
    # Factors
    regime_score = Column(Float)
    liquidity_score = Column(Float)
    crowding_score = Column(Float)
    timing_score = Column(Float)
    
    # Explanation
    rationale = Column(Text)
    
    # Provenance
    model_version = Column(String(50))
    computed_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    signal = relationship("Signal", back_populates="meta_label")


class Playbook(Base):
    """Event playbooks - tactical strategies for specific events."""
    __tablename__ = "playbooks"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False, unique=True)
    event_type = Column(String(50), nullable=False, index=True)
    regime_match = Column(JSON)  # {"volatility": ["LOW", "MED"], "liquidity": ["HIGH"]}
    
    # Tactical Overrides
    priority_boost = Column(Float, default=1.0)
    tranche_plan = Column(JSON)  # [{"percent": 50, "delay": 0}, ...]
    acceptable_gap_chase_percent = Column(Float)
    sl_multiplier_override = Column(Float)
    tp_multiplier_override = Column(Float)
    
    # Restrictions
    pause_smallcap = Column(Boolean, default=False)
    pause_duration_hours = Column(Integer)
    rotate_exposure_sectors = Column(JSON)
    
    # Configuration
    is_active = Column(Boolean, default=True, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class RiskSnapshot(Base):
    """Real-time risk monitoring snapshots."""
    __tablename__ = "risk_snapshots"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=True)  # NULL for portfolio-wide
    
    # Current State
    total_open_risk = Column(Float)
    total_unrealized_pnl = Column(Float)
    open_positions_count = Column(Integer)
    
    # Daily Metrics
    daily_new_risk = Column(Float)
    daily_realized_pnl = Column(Float)
    daily_max_drawdown = Column(Float)
    
    # Volatility
    portfolio_volatility = Column(Float)
    volatility_target = Column(Float)
    
    # Sector Exposure
    sector_exposures = Column(JSON)  # {"banking": 25.5, "it": 15.2}
    
    # Kill Switch Status
    kill_switches_active = Column(JSON)
    
    timestamp = Column(DateTime, default=datetime.utcnow, index=True)


class KillSwitch(Base):
    """Kill switches / circuit breakers."""
    __tablename__ = "kill_switches"
    
    id = Column(Integer, primary_key=True, index=True)
    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=True)  # NULL for portfolio-wide
    
    # Configuration
    switch_type = Column(String(50), nullable=False)  # MAX_DAILY_LOSS, MAX_DRAWDOWN, VOL_SPIKE
    threshold_value = Column(Float, nullable=False)
    threshold_type = Column(String(20))  # ABSOLUTE, PERCENTAGE
    
    # Status
    is_active = Column(Boolean, default=True, index=True)
    is_triggered = Column(Boolean, default=False, index=True)
    triggered_at = Column(DateTime)
    triggered_value = Column(Float)
    
    # Actions
    action_on_trigger = Column(JSON)  # {"pause_new_entries": true, "close_all": false}
    auto_reset_minutes = Column(Integer)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


# Database initialization
def init_db():
    """Initialize database tables."""
    Base.metadata.create_all(bind=engine)
    print("Database initialized successfully!")


def get_db() -> Generator:
    """Dependency for getting database session."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

